// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class FounderClaim extends ethereum.Event {
  get params(): FounderClaim__Params {
    return new FounderClaim__Params(this);
  }
}

export class FounderClaim__Params {
  _event: FounderClaim;

  constructor(event: FounderClaim) {
    this._event = event;
  }

  get claimant(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class MultisigClaim extends ethereum.Event {
  get params(): MultisigClaim__Params {
    return new MultisigClaim__Params(this);
  }
}

export class MultisigClaim__Params {
  _event: MultisigClaim;

  constructor(event: MultisigClaim) {
    this._event = event;
  }

  get multisig(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Staked extends ethereum.Event {
  get params(): Staked__Params {
    return new Staked__Params(this);
  }
}

export class Staked__Params {
  _event: Staked;

  constructor(event: Staked) {
    this._event = event;
  }

  get staker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get LPamount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Unstaked extends ethereum.Event {
  get params(): Unstaked__Params {
    return new Unstaked__Params(this);
  }
}

export class Unstaked__Params {
  _event: Unstaked;

  constructor(event: Unstaked) {
    this._event = event;
  }

  get staker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get LPamount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get rewards(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DFP2__stakerDataResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class DFP2__stakingStateResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class DFP2 extends ethereum.SmartContract {
  static bind(address: Address): DFP2 {
    return new DFP2("DFP2", address);
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimFounderAllocation(amount: BigInt, destination: Address): BigInt {
    let result = super.call(
      "claimFounderAllocation",
      "claimFounderAllocation(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(destination)
      ]
    );

    return result[0].toBigInt();
  }

  try_claimFounderAllocation(
    amount: BigInt,
    destination: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimFounderAllocation",
      "claimFounderAllocation(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(destination)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimMultisigAllocation(): BigInt {
    let result = super.call(
      "claimMultisigAllocation",
      "claimMultisigAllocation():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_claimMultisigAllocation(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimMultisigAllocation",
      "claimMultisigAllocation():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  founder(): Address {
    let result = super.call("founder", "founder():(address)", []);

    return result[0].toAddress();
  }

  try_founder(): ethereum.CallResult<Address> {
    let result = super.tryCall("founder", "founder():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  founderAllocationClaimed(): BigInt {
    let result = super.call(
      "founderAllocationClaimed",
      "founderAllocationClaimed():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_founderAllocationClaimed(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "founderAllocationClaimed",
      "founderAllocationClaimed():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  indexToken(): Address {
    let result = super.call("indexToken", "indexToken():(address)", []);

    return result[0].toAddress();
  }

  try_indexToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("indexToken", "indexToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  multisig(): Address {
    let result = super.call("multisig", "multisig():(address)", []);

    return result[0].toAddress();
  }

  try_multisig(): ethereum.CallResult<Address> {
    let result = super.tryCall("multisig", "multisig():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  multisigAllocationClaimed(): BigInt {
    let result = super.call(
      "multisigAllocationClaimed",
      "multisigAllocationClaimed():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_multisigAllocationClaimed(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "multisigAllocationClaimed",
      "multisigAllocationClaimed():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rewardsQuote(stakerAddress: Address): BigInt {
    let result = super.call("rewardsQuote", "rewardsQuote(address):(uint256)", [
      ethereum.Value.fromAddress(stakerAddress)
    ]);

    return result[0].toBigInt();
  }

  try_rewardsQuote(stakerAddress: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardsQuote",
      "rewardsQuote(address):(uint256)",
      [ethereum.Value.fromAddress(stakerAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  setIndexToken(indexTokenAddress: Address): boolean {
    let result = super.call("setIndexToken", "setIndexToken(address):(bool)", [
      ethereum.Value.fromAddress(indexTokenAddress)
    ]);

    return result[0].toBoolean();
  }

  try_setIndexToken(indexTokenAddress: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "setIndexToken",
      "setIndexToken(address):(bool)",
      [ethereum.Value.fromAddress(indexTokenAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  setMultisigAddress(multisigAddress: Address): boolean {
    let result = super.call(
      "setMultisigAddress",
      "setMultisigAddress(address):(bool)",
      [ethereum.Value.fromAddress(multisigAddress)]
    );

    return result[0].toBoolean();
  }

  try_setMultisigAddress(
    multisigAddress: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "setMultisigAddress",
      "setMultisigAddress(address):(bool)",
      [ethereum.Value.fromAddress(multisigAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  stake(LPamount: BigInt): boolean {
    let result = super.call("stake", "stake(uint96):(bool)", [
      ethereum.Value.fromUnsignedBigInt(LPamount)
    ]);

    return result[0].toBoolean();
  }

  try_stake(LPamount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("stake", "stake(uint96):(bool)", [
      ethereum.Value.fromUnsignedBigInt(LPamount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  stakerData(param0: Address): DFP2__stakerDataResult {
    let result = super.call(
      "stakerData",
      "stakerData(address):(uint96,uint96)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new DFP2__stakerDataResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_stakerData(param0: Address): ethereum.CallResult<DFP2__stakerDataResult> {
    let result = super.tryCall(
      "stakerData",
      "stakerData(address):(uint96,uint96)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DFP2__stakerDataResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  stakingState(): DFP2__stakingStateResult {
    let result = super.call(
      "stakingState",
      "stakingState():(uint96,uint96,uint32,uint32)",
      []
    );

    return new DFP2__stakingStateResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_stakingState(): ethereum.CallResult<DFP2__stakingStateResult> {
    let result = super.tryCall(
      "stakingState",
      "stakingState():(uint96,uint96,uint32,uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DFP2__stakingStateResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(recipient: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(sender: Address, recipient: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  unstake(LPamount: BigInt): BigInt {
    let result = super.call("unstake", "unstake(uint96):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(LPamount)
    ]);

    return result[0].toBigInt();
  }

  try_unstake(LPamount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("unstake", "unstake(uint96):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(LPamount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get founderAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get mintAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get startTime(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ClaimFounderAllocationCall extends ethereum.Call {
  get inputs(): ClaimFounderAllocationCall__Inputs {
    return new ClaimFounderAllocationCall__Inputs(this);
  }

  get outputs(): ClaimFounderAllocationCall__Outputs {
    return new ClaimFounderAllocationCall__Outputs(this);
  }
}

export class ClaimFounderAllocationCall__Inputs {
  _call: ClaimFounderAllocationCall;

  constructor(call: ClaimFounderAllocationCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get destination(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ClaimFounderAllocationCall__Outputs {
  _call: ClaimFounderAllocationCall;

  constructor(call: ClaimFounderAllocationCall) {
    this._call = call;
  }

  get actualAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ClaimMultisigAllocationCall extends ethereum.Call {
  get inputs(): ClaimMultisigAllocationCall__Inputs {
    return new ClaimMultisigAllocationCall__Inputs(this);
  }

  get outputs(): ClaimMultisigAllocationCall__Outputs {
    return new ClaimMultisigAllocationCall__Outputs(this);
  }
}

export class ClaimMultisigAllocationCall__Inputs {
  _call: ClaimMultisigAllocationCall;

  constructor(call: ClaimMultisigAllocationCall) {
    this._call = call;
  }
}

export class ClaimMultisigAllocationCall__Outputs {
  _call: ClaimMultisigAllocationCall;

  constructor(call: ClaimMultisigAllocationCall) {
    this._call = call;
  }

  get amountReleased(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetIndexTokenCall extends ethereum.Call {
  get inputs(): SetIndexTokenCall__Inputs {
    return new SetIndexTokenCall__Inputs(this);
  }

  get outputs(): SetIndexTokenCall__Outputs {
    return new SetIndexTokenCall__Outputs(this);
  }
}

export class SetIndexTokenCall__Inputs {
  _call: SetIndexTokenCall;

  constructor(call: SetIndexTokenCall) {
    this._call = call;
  }

  get indexTokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetIndexTokenCall__Outputs {
  _call: SetIndexTokenCall;

  constructor(call: SetIndexTokenCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetMultisigAddressCall extends ethereum.Call {
  get inputs(): SetMultisigAddressCall__Inputs {
    return new SetMultisigAddressCall__Inputs(this);
  }

  get outputs(): SetMultisigAddressCall__Outputs {
    return new SetMultisigAddressCall__Outputs(this);
  }
}

export class SetMultisigAddressCall__Inputs {
  _call: SetMultisigAddressCall;

  constructor(call: SetMultisigAddressCall) {
    this._call = call;
  }

  get multisigAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetMultisigAddressCall__Outputs {
  _call: SetMultisigAddressCall;

  constructor(call: SetMultisigAddressCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get LPamount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class StopProgramCall extends ethereum.Call {
  get inputs(): StopProgramCall__Inputs {
    return new StopProgramCall__Inputs(this);
  }

  get outputs(): StopProgramCall__Outputs {
    return new StopProgramCall__Outputs(this);
  }
}

export class StopProgramCall__Inputs {
  _call: StopProgramCall;

  constructor(call: StopProgramCall) {
    this._call = call;
  }
}

export class StopProgramCall__Outputs {
  _call: StopProgramCall;

  constructor(call: StopProgramCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnstakeCall extends ethereum.Call {
  get inputs(): UnstakeCall__Inputs {
    return new UnstakeCall__Inputs(this);
  }

  get outputs(): UnstakeCall__Outputs {
    return new UnstakeCall__Outputs(this);
  }
}

export class UnstakeCall__Inputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }

  get LPamount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UnstakeCall__Outputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }

  get rewards(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
