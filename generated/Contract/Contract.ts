// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class BootstrapBonus extends ethereum.Event {
  get params(): BootstrapBonus__Params {
    return new BootstrapBonus__Params(this);
  }
}

export class BootstrapBonus__Params {
  _event: BootstrapBonus;

  constructor(event: BootstrapBonus) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get bonusToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get bonusAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class BootstrapCompleted extends ethereum.Event {
  get params(): BootstrapCompleted__Params {
    return new BootstrapCompleted__Params(this);
  }
}

export class BootstrapCompleted__Params {
  _event: BootstrapCompleted;

  constructor(event: BootstrapCompleted) {
    this._event = event;
  }

  get delistedToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get listedToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Bootstrapped extends ethereum.Event {
  get params(): Bootstrapped__Params {
    return new Bootstrapped__Params(this);
  }
}

export class Bootstrapped__Params {
  _event: Bootstrapped;

  constructor(event: Bootstrapped) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get inputToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get inputAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get outputToken(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get outputAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class LiquidityAdded extends ethereum.Event {
  get params(): LiquidityAdded__Params {
    return new LiquidityAdded__Params(this);
  }
}

export class LiquidityAdded__Params {
  _event: LiquidityAdded;

  constructor(event: LiquidityAdded) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get LPs(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class LiquidityRemoved extends ethereum.Event {
  get params(): LiquidityRemoved__Params {
    return new LiquidityRemoved__Params(this);
  }
}

export class LiquidityRemoved__Params {
  _event: LiquidityRemoved;

  constructor(event: LiquidityRemoved) {
    this._event = event;
  }

  get recipient(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get LPs(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class MultiLiquidityAdded extends ethereum.Event {
  get params(): MultiLiquidityAdded__Params {
    return new MultiLiquidityAdded__Params(this);
  }
}

export class MultiLiquidityAdded__Params {
  _event: MultiLiquidityAdded;

  constructor(event: MultiLiquidityAdded) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get LPs(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get totalLPafter(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class MultiLiquidityRemoved extends ethereum.Event {
  get params(): MultiLiquidityRemoved__Params {
    return new MultiLiquidityRemoved__Params(this);
  }
}

export class MultiLiquidityRemoved__Params {
  _event: MultiLiquidityRemoved;

  constructor(event: MultiLiquidityRemoved) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get LPs(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get totalLPafter(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Swapped extends ethereum.Event {
  get params(): Swapped__Params {
    return new Swapped__Params(this);
  }
}

export class Swapped__Params {
  _event: Swapped;

  constructor(event: Swapped) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get inputToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get outputToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get inputAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get outputAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Contract__DFPconfigResult {
  value0: boolean;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: boolean, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class Contract__listedTokensResult {
  value0: i32;
  value1: BigInt;

  constructor(value0: i32, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Contract__listingUpdateResult {
  value0: Address;
  value1: Address;

  constructor(value0: Address, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  DFPconfig(): Contract__DFPconfigResult {
    let result = super.call(
      "DFPconfig",
      "DFPconfig():(bool,uint64,uint64)",
      []
    );

    return new Contract__DFPconfigResult(
      result[0].toBoolean(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_DFPconfig(): ethereum.CallResult<Contract__DFPconfigResult> {
    let result = super.tryCall(
      "DFPconfig",
      "DFPconfig():(bool,uint64,uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__DFPconfigResult(
        value[0].toBoolean(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  admin(): Address {
    let result = super.call("admin", "admin():(address)", []);

    return result[0].toAddress();
  }

  try_admin(): ethereum.CallResult<Address> {
    let result = super.tryCall("admin", "admin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bootstrapNewToken(
    inputToken: Address,
    maxInputAmount: BigInt,
    outputToken: Address
  ): BigInt {
    let result = super.call(
      "bootstrapNewToken",
      "bootstrapNewToken(address,uint256,address):(uint64)",
      [
        ethereum.Value.fromAddress(inputToken),
        ethereum.Value.fromUnsignedBigInt(maxInputAmount),
        ethereum.Value.fromAddress(outputToken)
      ]
    );

    return result[0].toBigInt();
  }

  try_bootstrapNewToken(
    inputToken: Address,
    maxInputAmount: BigInt,
    outputToken: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "bootstrapNewToken",
      "bootstrapNewToken(address,uint256,address):(uint64)",
      [
        ethereum.Value.fromAddress(inputToken),
        ethereum.Value.fromUnsignedBigInt(maxInputAmount),
        ethereum.Value.fromAddress(outputToken)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bootstrapNewTokenWithBonus(
    inputToken: Address,
    maxInputAmount: BigInt,
    outputToken: Address,
    bonusToken: Address
  ): BigInt {
    let result = super.call(
      "bootstrapNewTokenWithBonus",
      "bootstrapNewTokenWithBonus(address,uint256,address,address):(uint256)",
      [
        ethereum.Value.fromAddress(inputToken),
        ethereum.Value.fromUnsignedBigInt(maxInputAmount),
        ethereum.Value.fromAddress(outputToken),
        ethereum.Value.fromAddress(bonusToken)
      ]
    );

    return result[0].toBigInt();
  }

  try_bootstrapNewTokenWithBonus(
    inputToken: Address,
    maxInputAmount: BigInt,
    outputToken: Address,
    bonusToken: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "bootstrapNewTokenWithBonus",
      "bootstrapNewTokenWithBonus(address,uint256,address,address):(uint256)",
      [
        ethereum.Value.fromAddress(inputToken),
        ethereum.Value.fromUnsignedBigInt(maxInputAmount),
        ethereum.Value.fromAddress(outputToken),
        ethereum.Value.fromAddress(bonusToken)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  listedTokens(param0: Address): Contract__listedTokensResult {
    let result = super.call(
      "listedTokens",
      "listedTokens(address):(uint8,uint112)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new Contract__listedTokensResult(
      result[0].toI32(),
      result[1].toBigInt()
    );
  }

  try_listedTokens(
    param0: Address
  ): ethereum.CallResult<Contract__listedTokensResult> {
    let result = super.tryCall(
      "listedTokens",
      "listedTokens(address):(uint8,uint112)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__listedTokensResult(value[0].toI32(), value[1].toBigInt())
    );
  }

  listingUpdate(): Contract__listingUpdateResult {
    let result = super.call(
      "listingUpdate",
      "listingUpdate():(address,address)",
      []
    );

    return new Contract__listingUpdateResult(
      result[0].toAddress(),
      result[1].toAddress()
    );
  }

  try_listingUpdate(): ethereum.CallResult<Contract__listingUpdateResult> {
    let result = super.tryCall(
      "listingUpdate",
      "listingUpdate():(address,address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__listingUpdateResult(
        value[0].toAddress(),
        value[1].toAddress()
      )
    );
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  removeLiquidity(
    LPamount: BigInt,
    outputToken: Address,
    minOutputAmount: BigInt
  ): BigInt {
    let result = super.call(
      "removeLiquidity",
      "removeLiquidity(uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(LPamount),
        ethereum.Value.fromAddress(outputToken),
        ethereum.Value.fromUnsignedBigInt(minOutputAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try_removeLiquidity(
    LPamount: BigInt,
    outputToken: Address,
    minOutputAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "removeLiquidity",
      "removeLiquidity(uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(LPamount),
        ethereum.Value.fromAddress(outputToken),
        ethereum.Value.fromUnsignedBigInt(minOutputAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  removeMultiple(LPamount: BigInt, tokens: Array<Address>): boolean {
    let result = super.call(
      "removeMultiple",
      "removeMultiple(uint256,address[]):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(LPamount),
        ethereum.Value.fromAddressArray(tokens)
      ]
    );

    return result[0].toBoolean();
  }

  try_removeMultiple(
    LPamount: BigInt,
    tokens: Array<Address>
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "removeMultiple",
      "removeMultiple(uint256,address[]):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(LPamount),
        ethereum.Value.fromAddressArray(tokens)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(recipient: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(sender: Address, recipient: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get tokensToList(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get mintAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get name_(): string {
    return this._call.inputValues[2].value.toString();
  }

  get symbol_(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddLiquidityCall extends ethereum.Call {
  get inputs(): AddLiquidityCall__Inputs {
    return new AddLiquidityCall__Inputs(this);
  }

  get outputs(): AddLiquidityCall__Outputs {
    return new AddLiquidityCall__Outputs(this);
  }
}

export class AddLiquidityCall__Inputs {
  _call: AddLiquidityCall;

  constructor(call: AddLiquidityCall) {
    this._call = call;
  }

  get inputToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get inputAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get minLP(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class AddLiquidityCall__Outputs {
  _call: AddLiquidityCall;

  constructor(call: AddLiquidityCall) {
    this._call = call;
  }

  get actualLP(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class AddMultipleCall extends ethereum.Call {
  get inputs(): AddMultipleCall__Inputs {
    return new AddMultipleCall__Inputs(this);
  }

  get outputs(): AddMultipleCall__Outputs {
    return new AddMultipleCall__Outputs(this);
  }
}

export class AddMultipleCall__Inputs {
  _call: AddMultipleCall;

  constructor(call: AddMultipleCall) {
    this._call = call;
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get maxAmounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class AddMultipleCall__Outputs {
  _call: AddMultipleCall;

  constructor(call: AddMultipleCall) {
    this._call = call;
  }

  get actualLP(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BootstrapNewTokenCall extends ethereum.Call {
  get inputs(): BootstrapNewTokenCall__Inputs {
    return new BootstrapNewTokenCall__Inputs(this);
  }

  get outputs(): BootstrapNewTokenCall__Outputs {
    return new BootstrapNewTokenCall__Outputs(this);
  }
}

export class BootstrapNewTokenCall__Inputs {
  _call: BootstrapNewTokenCall;

  constructor(call: BootstrapNewTokenCall) {
    this._call = call;
  }

  get inputToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get maxInputAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get outputToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class BootstrapNewTokenCall__Outputs {
  _call: BootstrapNewTokenCall;

  constructor(call: BootstrapNewTokenCall) {
    this._call = call;
  }

  get fractionBootstrapped(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class BootstrapNewTokenWithBonusCall extends ethereum.Call {
  get inputs(): BootstrapNewTokenWithBonusCall__Inputs {
    return new BootstrapNewTokenWithBonusCall__Inputs(this);
  }

  get outputs(): BootstrapNewTokenWithBonusCall__Outputs {
    return new BootstrapNewTokenWithBonusCall__Outputs(this);
  }
}

export class BootstrapNewTokenWithBonusCall__Inputs {
  _call: BootstrapNewTokenWithBonusCall;

  constructor(call: BootstrapNewTokenWithBonusCall) {
    this._call = call;
  }

  get inputToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get maxInputAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get outputToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get bonusToken(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class BootstrapNewTokenWithBonusCall__Outputs {
  _call: BootstrapNewTokenWithBonusCall;

  constructor(call: BootstrapNewTokenWithBonusCall) {
    this._call = call;
  }

  get bonusAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ChangeListingCall extends ethereum.Call {
  get inputs(): ChangeListingCall__Inputs {
    return new ChangeListingCall__Inputs(this);
  }

  get outputs(): ChangeListingCall__Outputs {
    return new ChangeListingCall__Outputs(this);
  }
}

export class ChangeListingCall__Inputs {
  _call: ChangeListingCall;

  constructor(call: ChangeListingCall) {
    this._call = call;
  }

  get tokenToDelist(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenToList(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get listingTarget(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ChangeListingCall__Outputs {
  _call: ChangeListingCall;

  constructor(call: ChangeListingCall) {
    this._call = call;
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class LockExchangeCall extends ethereum.Call {
  get inputs(): LockExchangeCall__Inputs {
    return new LockExchangeCall__Inputs(this);
  }

  get outputs(): LockExchangeCall__Outputs {
    return new LockExchangeCall__Outputs(this);
  }
}

export class LockExchangeCall__Inputs {
  _call: LockExchangeCall;

  constructor(call: LockExchangeCall) {
    this._call = call;
  }
}

export class LockExchangeCall__Outputs {
  _call: LockExchangeCall;

  constructor(call: LockExchangeCall) {
    this._call = call;
  }
}

export class RemoveLiquidityCall extends ethereum.Call {
  get inputs(): RemoveLiquidityCall__Inputs {
    return new RemoveLiquidityCall__Inputs(this);
  }

  get outputs(): RemoveLiquidityCall__Outputs {
    return new RemoveLiquidityCall__Outputs(this);
  }
}

export class RemoveLiquidityCall__Inputs {
  _call: RemoveLiquidityCall;

  constructor(call: RemoveLiquidityCall) {
    this._call = call;
  }

  get LPamount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get outputToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get minOutputAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RemoveLiquidityCall__Outputs {
  _call: RemoveLiquidityCall;

  constructor(call: RemoveLiquidityCall) {
    this._call = call;
  }

  get actualOutput(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RemoveMultipleCall extends ethereum.Call {
  get inputs(): RemoveMultipleCall__Inputs {
    return new RemoveMultipleCall__Inputs(this);
  }

  get outputs(): RemoveMultipleCall__Outputs {
    return new RemoveMultipleCall__Outputs(this);
  }
}

export class RemoveMultipleCall__Inputs {
  _call: RemoveMultipleCall;

  constructor(call: RemoveMultipleCall) {
    this._call = call;
  }

  get LPamount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class RemoveMultipleCall__Outputs {
  _call: RemoveMultipleCall;

  constructor(call: RemoveMultipleCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetAdminCall extends ethereum.Call {
  get inputs(): SetAdminCall__Inputs {
    return new SetAdminCall__Inputs(this);
  }

  get outputs(): SetAdminCall__Outputs {
    return new SetAdminCall__Outputs(this);
  }
}

export class SetAdminCall__Inputs {
  _call: SetAdminCall;

  constructor(call: SetAdminCall) {
    this._call = call;
  }

  get adminAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetAdminCall__Outputs {
  _call: SetAdminCall;

  constructor(call: SetAdminCall) {
    this._call = call;
  }
}

export class SetDeListingBonusCall extends ethereum.Call {
  get inputs(): SetDeListingBonusCall__Inputs {
    return new SetDeListingBonusCall__Inputs(this);
  }

  get outputs(): SetDeListingBonusCall__Outputs {
    return new SetDeListingBonusCall__Outputs(this);
  }
}

export class SetDeListingBonusCall__Inputs {
  _call: SetDeListingBonusCall;

  constructor(call: SetDeListingBonusCall) {
    this._call = call;
  }

  get delistingBonus(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetDeListingBonusCall__Outputs {
  _call: SetDeListingBonusCall;

  constructor(call: SetDeListingBonusCall) {
    this._call = call;
  }
}

export class SetTradingFeeCall extends ethereum.Call {
  get inputs(): SetTradingFeeCall__Inputs {
    return new SetTradingFeeCall__Inputs(this);
  }

  get outputs(): SetTradingFeeCall__Outputs {
    return new SetTradingFeeCall__Outputs(this);
  }
}

export class SetTradingFeeCall__Inputs {
  _call: SetTradingFeeCall;

  constructor(call: SetTradingFeeCall) {
    this._call = call;
  }

  get oneMinusFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetTradingFeeCall__Outputs {
  _call: SetTradingFeeCall;

  constructor(call: SetTradingFeeCall) {
    this._call = call;
  }
}

export class SwapCall extends ethereum.Call {
  get inputs(): SwapCall__Inputs {
    return new SwapCall__Inputs(this);
  }

  get outputs(): SwapCall__Outputs {
    return new SwapCall__Outputs(this);
  }
}

export class SwapCall__Inputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }

  get inputToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get outputToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get inputAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get minOutputAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SwapCall__Outputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }

  get outputAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnlockExchangeCall extends ethereum.Call {
  get inputs(): UnlockExchangeCall__Inputs {
    return new UnlockExchangeCall__Inputs(this);
  }

  get outputs(): UnlockExchangeCall__Outputs {
    return new UnlockExchangeCall__Outputs(this);
  }
}

export class UnlockExchangeCall__Inputs {
  _call: UnlockExchangeCall;

  constructor(call: UnlockExchangeCall) {
    this._call = call;
  }
}

export class UnlockExchangeCall__Outputs {
  _call: UnlockExchangeCall;

  constructor(call: UnlockExchangeCall) {
    this._call = call;
  }
}
